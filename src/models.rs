use crate::schema::my_table;
use diesel::Queryable;
use diesel::sql_types::Text;

#[derive(Insertable)]
#[diesel(table_name = my_table)]
pub struct NewYourModel {
    pub id: String,
    pub uid: String,
    pub adjdate: String,
    pub adjtype: String,
    pub remitter: String,
    pub beneficiery: String,
    pub response: String,
    pub txndate: String,
    pub txntime: String,
    pub rrn: String,
    pub terminalid: String,
    pub ben_mobile_no: String,
    pub rem_mobile_no: String,
    pub chbdate: String,
    pub chbref: String,
    pub txnamount: String,
    pub adjamount: String,
    pub rem_payee_psp_fee: String,
    pub ben_fee: String,
    pub ben_fee_sw: String,
    pub adjfee: String,
    pub npcifee: String,
    pub remfeetax: String,
    pub benfeetax: String,
    pub npcitax: String,
    pub adjref: String,
    pub bankadjref: String,
    pub adjproof: String,
    pub compensation_amount: String,
    pub adjustment_raised_time: String,
    pub no_of_days_for_penalty: String,
    pub shdt73: String,
    pub shdt74: String,
    pub shdt75: String,
    pub shdt76: String,
    pub shdt77: String,
    pub transaction_type: String,
    pub transaction_indicator: String,
    pub beneficiary_account_number: String,
    pub remitter_account_number: String,
    pub aadhar_number: String,
    pub mobile_number: String,
    pub payer_psp: String,
    pub payee_psp: String,
    pub upi_transaction_id: String,
    pub virtual_address: String,
    pub dispute_flag: String,
    pub reason_code: String,
    pub mcc: String,
    pub originating_channel: String,

}

impl NewYourModel {
    pub fn new(id: &str, uid: &str, adjdate: &str, adjtype: &str, remitter: &str, beneficiery: &str, response: &str, txndate: &str, txntime: &str, rrn: &str, terminalid: &str, ben_mobile_no: &str, rem_mobile_no: &str, chbdate: &str, chbref: &str, txnamount: &str, adjamount: &str, rem_payee_psp_fee: &str, ben_fee: &str, ben_fee_sw: &str, adjfee: &str, npcifee: &str, remfeetax: &str, benfeetax: &str, npcitax: &str, adjref: &str, bankadjref: &str, adjproof: &str, compensation_amount: &str, adjustment_raised_time: &str, no_of_days_for_penalty: &str, shdt73: &str, shdt74: &str, shdt75: &str, shdt76: &str, shdt77: &str, transaction_type: &str, transaction_indicator: &str, beneficiary_account_number: &str, remitter_account_number: &str, aadhar_number: &str, mobile_number: &str, payer_psp: &str, payee_psp: &str, upi_transaction_id: &str, virtual_address: &str, dispute_flag: &str, reason_code: &str, mcc: &str, originating_channel: &str) -> Self {
        NewYourModel {
            id: id.to_owned(),
            uid: uid.to_owned(),
            adjdate: adjdate.to_owned(),
            adjtype: adjtype.to_owned(),
            remitter: remitter.to_owned(),
            beneficiery: beneficiery.to_owned(),
            response: response.to_owned(),
            txndate: txndate.to_owned(),
            txntime: txntime.to_owned(),
            rrn: rrn.to_owned(),
            terminalid: terminalid.to_owned(),
            ben_mobile_no: ben_mobile_no.to_owned(),
            rem_mobile_no: rem_mobile_no.to_owned(),
            chbdate: chbdate.to_owned(),
            chbref: chbref.to_owned(),
            txnamount: txnamount.to_owned(),
            adjamount: adjamount.to_owned(),
            rem_payee_psp_fee: rem_payee_psp_fee.to_owned(),
            ben_fee: ben_fee.to_owned(),
            ben_fee_sw: ben_fee_sw.to_owned(),
            adjfee: adjfee.to_owned(),
            npcifee: npcifee.to_owned(),
            remfeetax: remfeetax.to_owned(),
            benfeetax: benfeetax.to_owned(),
            npcitax: npcitax.to_owned(),
            adjref: adjref.to_owned(),
            bankadjref: bankadjref.to_owned(),
            adjproof: adjproof.to_owned(),
            compensation_amount: compensation_amount.to_owned(),
            adjustment_raised_time: adjustment_raised_time.to_owned(),
            no_of_days_for_penalty: no_of_days_for_penalty.to_owned(),
            shdt73: shdt73.to_owned(),
            shdt74: shdt74.to_owned(),
            shdt75: shdt75.to_owned(),
            shdt76: shdt76.to_owned(),
            shdt77: shdt77.to_owned(),
            transaction_type: transaction_type.to_owned(),
            transaction_indicator: transaction_indicator.to_owned(),
            beneficiary_account_number: beneficiary_account_number.to_owned(),
            remitter_account_number: remitter_account_number.to_owned(),
            aadhar_number: aadhar_number.to_owned(),
            mobile_number: mobile_number.to_owned(),
            payer_psp: payer_psp.to_owned(),
            payee_psp: payee_psp.to_owned(),
            upi_transaction_id: upi_transaction_id.to_owned(),
            virtual_address: virtual_address.to_owned(),
            dispute_flag: dispute_flag.to_owned(),
            reason_code: reason_code.to_owned(),
            mcc: mcc.to_owned(),
            originating_channel: originating_channel.to_owned(),

        }
    }
}

#[derive(Debug)]
pub struct MyTable {
    pub id: String,
    pub uid: String,
    pub adjdate: String,
    pub adjtype: String,
    pub remitter: String,
    pub beneficiery: String,
    pub response: String,
    pub txndate: String,
    pub txntime: String,
    pub rrn: String,
    pub terminalid: String,
    pub ben_mobile_no: String,
    pub rem_mobile_no: String,
    pub chbdate: String,
    pub chbref: String,
    pub txnamount: String,
    pub adjamount: String,
    pub rem_payee_psp_fee: String,
    pub ben_fee: String,
    pub ben_fee_sw: String,
    pub adjfee: String,
    pub npcifee: String,
    pub remfeetax: String,
    pub benfeetax: String,
    pub npcitax: String,
    pub adjref: String,
    pub bankadjref: String,
    pub adjproof: String,
    pub compensation_amount: String,
    pub adjustment_raised_time: String,
    pub no_of_days_for_penalty: String,
    pub shdt73: String,
    pub shdt74: String,
    pub shdt75: String,
    pub shdt76: String,
    pub shdt77: String,
    pub transaction_type: String,
    pub transaction_indicator: String,
    pub beneficiary_account_number: String,
    pub remitter_account_number: String,
    pub aadhar_number: String,
    pub mobile_number: String,
    pub payer_psp: String,
    pub payee_psp: String,
    pub upi_transaction_id: String,
    pub virtual_address: String,
    pub dispute_flag: String,
    pub reason_code: String,
    pub mcc: String,
    pub originating_channel: String,
    // Add more fields as needed
}

impl Queryable<(Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text, Text), diesel::pg::Pg> for MyTable {
    type Row = (String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String);

    fn build(row: Self::Row) -> Result<MyTable, Box<(dyn std::error::Error + Send + Sync + 'static)>> {
        Ok(MyTable {
            id: row.0,
            uid: row.1,
            adjdate: row.2,
            adjtype: row.3,
            remitter: row.4,
            beneficiery: row.5,
            response: row.6,
            txndate: row.7,
            txntime: row.8,
            rrn: row.9,
            terminalid: row.10,
            ben_mobile_no: row.11,
            rem_mobile_no: row.12,
            chbdate: row.13,
            chbref: row.14,
            txnamount: row.15,
            adjamount: row.16,
            rem_payee_psp_fee: row.17,
            ben_fee: row.18,
            ben_fee_sw: row.19,
            adjfee: row.20,
            npcifee: row.21,
            remfeetax: row.22,
            benfeetax: row.23,
            npcitax: row.24,
            adjref: row.25,
            bankadjref: row.26,
            adjproof: row.27,
            compensation_amount: row.28,
            adjustment_raised_time: row.29,
            no_of_days_for_penalty: row.30,
            shdt73: row.31,
            shdt74: row.32,
            shdt75: row.33,
            shdt76: row.34,
            shdt77: row.35,
            transaction_type: row.36,
            transaction_indicator: row.37,
            beneficiary_account_number: row.38,
            remitter_account_number: row.39,
            aadhar_number: row.40,
            mobile_number: row.41,
            payer_psp: row.42,
            payee_psp: row.43,
            upi_transaction_id: row.44,
            virtual_address: row.45,
            dispute_flag: row.46,
            reason_code: row.47,
            mcc: row.48,
            originating_channel: row.49,
        })
    }
}
